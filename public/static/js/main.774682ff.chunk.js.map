{"version":3,"sources":["SurveyHome.js","App.js","serviceWorker.js","index.js"],"names":["surveyHome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendDataToServer","survey","console","log","resultAsString","JSON","stringify","data","bind","assertThisInitialized","react_default","a","createElement","survey_react","json","title","pages","name","questions","type","isRequired","onComplete","React","PureComponent","App","id","SurveyHome","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAwDeA,cAnDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,iBAAmB,SAACC,GAClBC,QAAQC,IAAI,+BACZ,IAAMC,EAAiBC,KAAKC,UAAUL,EAAOM,MAC7CL,QAAQC,IAAIC,IANZX,EAAKO,iBAAmBP,EAAKO,iBAAiBQ,KAAtBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAFPA,wEA2CjB,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAeC,KAjCF,CACfC,MAAO,2CACPC,MAAO,CACL,CACEC,KAAM,QACNC,UAAW,CACT,CACEC,KAAM,OACNC,YAAY,EACZH,KAAM,MAER,CACEE,KAAM,OACNC,YAAY,EACZH,KAAM,QAER,CACEE,KAAM,OACNC,YAAY,EACZH,KAAM,QAER,CACEE,KAAM,UACNC,YAAY,EACZH,KAAM,UASqBI,WAAYzB,KAAKI,2BA9CjCsB,IAAMC,eCoBhBC,mLAlBX,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,0FAMJF,EAAAC,EAAAC,cAAA,OAAKa,GAAG,mBACNf,EAAAC,EAAAC,cAACc,EAAD,eAbQC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.774682ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport * as Survey from \"survey-react\";\r\n\r\nclass surveyHome extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sendDataToServer = this.sendDataToServer.bind(this);\r\n  }\r\n\r\n  sendDataToServer = (survey) => {\r\n    console.log(\"function - sendDataToServer\");\r\n    const resultAsString = JSON.stringify(survey.data);\r\n    console.log(resultAsString); //send Ajax request to your web server.\r\n  };\r\n\r\n  render() {\r\n    var surveyJSON = {\r\n      title: \"Tell us the few details of microservice?\",\r\n      pages: [\r\n        {\r\n          name: \"page1\",\r\n          questions: [\r\n            {\r\n              type: \"text\",\r\n              isRequired: true,\r\n              name: \"id\",\r\n            },\r\n            {\r\n              type: \"text\",\r\n              isRequired: true,\r\n              name: \"mdcf\",\r\n            },\r\n            {\r\n              type: \"text\",\r\n              isRequired: true,\r\n              name: \"name\",\r\n            },\r\n            {\r\n              type: \"comment\",\r\n              isRequired: true,\r\n              name: \"id\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Survey.Survey json={surveyJSON} onComplete={this.sendDataToServer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default surveyHome;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SurveyHome from \"./SurveyHome\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <p>\n            <b>\n              Please fill the survey of the microservice whose health you want\n              to monitor\n            </b>\n          </p>\n        </header>\n        <div id=\"surveyContainer\">\n          <SurveyHome />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}